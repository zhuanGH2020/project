---
description: 
globs: 
alwaysApply: true
---
# 游戏开发主规则文档

# 你是一个Unity游戏开发专家，精通性能和内存优化，深入了解其独特功能以及游戏开发中的常见用例

# 对提出的需求优先按照项目文件中已经提供的接口和数据来构建新的逻辑需求

# 优先从项目中查找可以用来实现需求逻辑的接口和代码例子

# 生成的文档里不要有目录结构

## 1. Unity项目规范

### Unity命名约定

- **类名**: PascalCase，如 `PlayerController`, `InventoryManager`
- **公共变量和属性**: PascalCase，如 `Health`, `MaxSpeed`
- **私有变量**: camelCase + 下划线前缀，如 `_health`, `_isGamePaused`
- **方法名**: PascalCase，如 `StartGame()`, `UpdateHealth()`
- **常量**: UPPER_SNAKE_CASE，如 `MAX_HEALTH`, `DEFAULT_SPEED`
- **枚举**: PascalCase，如 `ActorType`, `ObjectState`
- **接口名**: 以I开头，如 `IDamageable`, `IInteractable`
- **文件名**: 与类名一致，如 `PlayerController.cs`
- **命名空间**: PascalCase，项目层级结构，如 `GameProject.Core.Manager`
- **所有公共方法和类**: 必须有XML文档注释（/// <summary>）

### MonoBehaviour规范
- 每个MonoBehaviour只负责一个明确的功能
- 使用 `[SerializeField]` 而不是 `public` 暴露字段
- 使用 `[Header]`, `[Tooltip]` 等特性改善Inspector体验
- 使用 `[Range]` 属性限制数值范围
- 重写 `Awake()`, `Start()`, `Update()` 时调用基类方法
- 缓存Transform等组件提升性能
- 使用事件系统进行组件间通信

### 组件设计
- 优先使用组合而非继承
- 每个组件职责单一，便于测试和复用
- 避免在Update中频繁查找组件
- UI系统遵循MVC模式分离关注点
- 游戏系统使用Manager模式管理

### 性能优化
- 缓存GetComponent结果
- 使用Object Pooling管理频繁创建销毁的对象
- 避免在Update中进行字符串操作
- 使用协程处理延时操作
- 合理使用LOD系统
- 优化渲染：合理使用光照贴图和动态光照
- 资源加载：根据需要实现分块加载和异步加载

### 配置表规范
- 表名和字段名命名规范: PascalCase，如`Item`，尽可能简短，但不要出现简写
- 使用`ConfigManager``ConfigReader`查询配置表
- 原始CSV表格采用GB2312编码，目录
- 转码工具 `Tools\csv_converter.bat`，需在`Tools`目录运行
	- 源目录：`CSV`，GB2312编码
	- 目标目录：`Resources\Configs\`，UTF8编码

## 2. 项目架构

### 核心系统设计

#### 资源管理系统
- **ResourceManager**: 资源加载管理，支持同步/异步加载、引用计数和自动卸载。详细文档：参考 `ResourceFramework_TechnicalDocument.md`

#### 对象池系统
- **ObjectPoolManager & ObjectPool**: 对象池管理，支持多类型对象复用、状态管理和超时清理。详细文档：参考 `PoolFramework_TechnicalDocument.md`

#### 配置系统
- **ConfigManager & ConfigReader**: 基于CSV的配置管理，支持多种数据类型解析和类型安全查询。详细文档：参考 `ConfigFramework_TechnicalDocument.md`

#### 事件系统
- **EventManager**: 统一事件架构，支持系统间通信和事件生命周期管理。详细文档：参考 `EventFramework_TechnicalDocument.md`


## 3. 协作规范

### 技术文档生成规范
- **当用户提问"生成某某的技术文档"时，必须严格基于本.cursorrules文件中已有的规则和规范**
- 技术文档内容必须遵循项目的架构设计、代码风格、命名约定等所有既定规范
- 文档中的代码示例必须符合Unity特定规范和性能优化要求
- 引用项目中现有的代码实现方式作为参考标准
- 保持与项目整体技术栈和开发模式的一致性
- **生成技术文档时要求精简，只实现核心模块，避免过度设计和复杂架构，专注于用户需求的核心功能**
- **设计文档中必须明确标注哪些脚本需要挂载到GameObject上使用，区分MonoBehaviour组件和纯数据类/工具类的使用方式**
- **核心系统设计规范**：在.cursorrules文件中，核心系统设计部分只做一句话总结，然后指向对应的技术文档
- **文档结构要求**：
  - 简介：用一句话简单介绍系统功能
  - 详细接口：列出所有对外接口和方法
  - 最佳实践：提供关键使用场景的代码示例
  - 注意事项：关键的使用要点（可选）
  - 其他需要补充的关键点（可选）

### 技术文档结构规范
- **文档章节顺序**: 简介 → 详细接口 → 最佳实践 → 注意事项（可选）→ 其他需要补充的关键点（可选）
- **便于开发流程**: 开发者可以快速了解系统功能、接口用法和最佳实践
- **文档重点**: 突出实用性和可操作性，减少理论性内容

### 文档存放规范
- **SetDocument文件夹**：存放用于指导AI实现的技术文档
  - 用途：为AI提供具体的实现指导和技术规范
  - 内容：详细的系统设计、实现要求、代码规范等
  - 目标：确保AI按照统一标准生成代码和文档
- **GetDocument文件夹**：存放AI生成的功能文档
  - 用途：保存AI根据SetDocument指导生成的技术文档
  - 内容：完整的系统文档、使用说明、API文档等
  - 目标：为开发者提供可用的技术文档
- **文档命名规范**：
  - 格式：`功能名称_TechnicalDocument.md` 或 `功能名称_README.md`
  - 使用PascalCase命名，如 `UIList_TechnicalDocument.md`
  - 包含创建日期和版本信息（在文档内容中标注）
