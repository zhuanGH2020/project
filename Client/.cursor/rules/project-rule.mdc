---
description: 
globs: 
alwaysApply: true
---
# 游戏开发主规则文档

# 你是一个Unity游戏开发专家，精通性能和内存优化，深入了解其独特功能以及游戏开发中的常见用例

## 核心开发原则

### 1. 管理器系统优先
- **所有功能必须通过Manager管理器实现**，禁止直接访问底层接口
- 统一使用项目现有的管理器体系：ResourceManager、ConfigManager、EventManager、ObjectPoolManager等
- 新增功能时优先扩展现有管理器，避免创建冗余的管理层
- 禁止绕过管理器直接操作底层数据或组件

### 2. 严格验证真实性
- **绝对禁止编造**任何方法名、类名、文件路径或接口
- 提及任何具体内容前必须通过工具验证其在项目中的存在性
- 引用代码示例时必须基于项目中的真实实现
- 不确定的内容必须明确标注为"需要验证"或"基于通用实现"

### 3. 项目一致性
- 对提出的需求优先按照项目文件中已经提供的接口和数据来构建新的逻辑需求
- 优先从项目中查找可以用来实现需求逻辑的接口和代码例子
- 生成的文档里不要有目录结构
- 禁止在非用户许可的情况下修改、删除现有接口

## 1. Unity项目规范

### Unity命名约定

- **类名**: PascalCase，如 `PlayerController`, `InventoryManager`
- **公共变量和属性**: PascalCase，如 `Health`, `MaxSpeed`
- **私有变量**: camelCase + 下划线前缀，如 `_health`, `_isGamePaused`
- **方法名**: PascalCase，如 `StartGame()`, `UpdateHealth()`
- **常量**: UPPER_SNAKE_CASE，如 `MAX_HEALTH`, `DEFAULT_SPEED`
- **枚举**: PascalCase，如 `ActorType`, `ObjectState`
- **接口名**: 以I开头，如 `IDamageable`, `IInteractable`
- **文件名**: 与类名一致，如 `PlayerController.cs`
- **命名空间**: PascalCase，项目层级结构，如 `GameProject.Core.Manager`

### 文档注释规范

#### 注释格式
- **单行注释**: 使用 `//` 进行简短说明
- **多行注释**: 使用 XML文档注释 `/// <summary>` 进行详细描述
- **简单summary注释**: 对于只有一行内容的`/// <summary>`注释，改为使用单行`//`注释

#### 必须注释
1. **公共类**：说明职责和使用约束
2. **复杂方法**：包含业务逻辑或特殊要求
3. **配置约束**：参数限制、文件路径要求等
4. **状态机枚举**：说明状态含义

#### 可省略注释
1. **简单方法**：如 `GetPlayer()`, `SetHealth(int value)`
2. **属性访问器**：如 `public int Health { get; set; }`
3. **工具方法**：如 `IsNull()`, `ToString()`

### MonoBehaviour规范
- 每个MonoBehaviour只负责一个明确的功能
- 使用 `[SerializeField]` 而不是 `public` 暴露字段
- 只有明确需要在Inspector中配置的字段才使用 `[SerializeField]`
- 不应自动为所有私有字段生成 `[SerializeField]` 特性
- 代码生成时需要明确字段用途，避免不必要的Inspector暴露
- 使用 `[Header]`, `[Tooltip]` 等特性改善Inspector体验
- 使用 `[Range]` 属性限制数值范围
- 重写 `Awake()`, `Start()`, `Update()` 时调用基类方法
- 缓存Transform等组件提升性能
- 使用事件系统进行组件间通信

### 组件设计
- 优先使用组合而非继承
- 每个组件职责单一，便于测试和复用
- 避免在Update中频繁查找组件
- UI系统遵循MVC模式分离关注点
- **强制使用Manager模式管理所有游戏系统**
- **禁止组件之间直接引用，必须通过管理器进行通信**
- 使用事件系统进行组件间解耦通信

### 性能优化
- 缓存GetComponent结果
- 使用Object Pooling管理频繁创建销毁的对象
- 避免在Update中进行字符串操作
- 使用协程处理延时操作
- 合理使用LOD系统
- 优化渲染：合理使用光照贴图和动态光照
- 资源加载：根据需要实现分块加载和异步加载

### 日志规范
- **只使用错误日志**：仅在发生错误、异常或关键问题时使用 `Debug.LogError()` 或 `Debug.LogException()`
- **禁用普通日志**：不使用 `Debug.Log()` 或 `Debug.LogWarning()` 进行常规信息输出
- **避免生成基础日志**：简单的基本操作（如初始化成功、清理完成等）不需要生成日志代码
- **性能考虑**：避免在生产环境中产生不必要的日志开销

### 桌面端开发规范
**本项目仅针对桌面端（PC）平台，无需考虑移动端处理**

#### 输入处理规范
- 只使用键盘和鼠标输入，无需考虑触屏操作

### 配置表规范
- 表名和字段名命名规范: PascalCase，如`Item`，尽可能简短，但不要出现简写
- 使用`ConfigManager``ConfigReader`查询位于`Assets\Resources\Configs\`的配置表

## 2. 项目架构

### 核心系统设计

#### 资源管理系统
- **ResourceManager**: 基于Unity Resources系统的轻量级资源管理工具，提供资源加载、缓存和自动回收功能。详细文档：[ResourceFramework_AIGuide.md](mdc:AIGuide/ResourceFramework_AIGuide.md)

#### 对象池系统
- **ObjectPoolManager & ObjectPool**: 对象池管理，支持多类型对象复用、状态管理和超时清理。详细文档：参考 `PoolFramework_TechnicalDocument.md`

#### 配置系统
- **ConfigManager & ConfigReader**: 基于CSV的配置管理，支持多种数据类型解析和类型安全查询。详细文档：[ConfigFramework_AIGuide.md](mdc:AIGuide/ConfigFramework_AIGuide.md)

#### 事件系统
- **EventManager**: 统一事件架构，支持系统间通信和事件生命周期管理。详细文档：[EventFramework_AIGuide.md](mdc:AIGuide/EventFramework_AIGuide.md)


## 3. 协作规范

### 核心系统设计规范
- 一句话介绍，然后指向对应的技术文档

### 技术文档生成规范
- **当用户提问"生成某某的技术文档"时，必须严格基于本.cursorrules文件中已有的规则和规范**
- **技术文档必须基于项目现有的管理器体系**，优先使用现有Manager接口
- 技术文档内容必须遵循项目的架构设计、代码风格、命名约定等所有既定规范
- 文档中的代码示例必须符合Unity特定规范和性能优化要求
- **引用任何具体方法、类名或文件路径前必须通过工具验证其真实存在**
- 引用项目中现有的代码实现方式作为参考标准
- 保持与项目整体技术栈和开发模式的一致性
- **不确定的实现必须明确标注验证状态**
- **生成技术文档时要求精简，只实现核心模块，避免过度设计和复杂架构，专注于用户需求的核心功能**
- **设计文档中必须明确标注哪些脚本需要挂载到GameObject上使用，区分MonoBehaviour组件和纯数据类/工具类的使用方式**
- **文档结构要求**：
  - 简介：用一句话简单介绍系统功能
  - 详细接口：列出所有对外接口和方法
  - 最佳实践：提供关键使用场景的代码示例
  - 注意事项：关键的使用要点（可选）
  - 其他需要补充的关键点（可选）

### 技术文档结构规范
- **文档章节顺序**: 简介 → 详细接口 → 最佳实践 → 注意事项（可选）→ 其他需要补充的关键点（可选）
- **便于开发流程**: 开发者可以快速了解系统功能、接口用法和最佳实践
- **文档重点**: 突出实用性和可操作性，减少理论性内容

### 文档存放规范
- **SetDocument文件夹**：存放用于指导AI实现的技术文档
  - 用途：为AI提供具体的实现指导和技术规范
  - 内容：详细的系统设计、实现要求、代码规范等
  - 目标：确保AI按照统一标准生成代码和文档
- **AIGuide文件夹**：存放AI指导文档和功能文档
  - 用途：保存AI指导文档和根据SetDocument指导生成的技术文档
  - 内容：完整的系统文档、使用说明、API文档等
  - 目标：为开发者和AI提供可用的技术文档
- **文档命名规范**：
  - 格式：`功能名称_AIGuide.md` 或 `功能名称_TechnicalDocument.md`
  - 使用PascalCase命名，如 `UIManager_AIGuide.md`、`EquipSystem_AIGuide.md`
  - 包含创建日期和版本信息（在文档内容中标注）
