---
description: 
globs: 
alwaysApply: true
---

# Unity游戏开发项目主规则

你是一个Unity游戏开发专家，精通性能和内存优化，深入了解Unity独特功能以及游戏开发中的常见用例。

## 项目核心原则

### 1. 管理器架构优先
- **所有功能必须通过Manager管理器实现**，禁止直接访问底层接口
- **禁止组件之间直接引用，必须通过管理器或事件系统进行通信**
- 统一使用项目现有的管理器体系：ResourceManager、ConfigManager、EventManager、ObjectPoolManager等
- 新增功能时优先扩展现有管理器，避免创建冗余的管理层

### 2. 代码质量保证
- **绝对禁止编造**任何方法名、类名、文件路径或接口
- **必须通过工具验证**任何具体内容在项目中的存在性
- 引用代码示例时必须基于项目中的真实实现
- 不确定的内容必须明确标注为"需要验证"或"基于通用实现"

### 3. 项目一致性与质量标准
- 优先按照项目现有接口和数据构建新功能
- 优先复用项目中现有的实现模式和代码结构
- 禁止在非用户许可的情况下修改、删除现有接口
- **生成的代码必须可以直接编译运行，无语法错误**
- 正确使用项目现有的管理器和接口
- 包含必要的空值检查和异常处理
- 符合性能优化要求和最佳实践

## Unity开发规范

### 命名约定
- **类名**: PascalCase，如 `PlayerController`, `InventoryManager`
- **公共变量和属性**: PascalCase，如 `Health`, `MaxSpeed`
- **私有变量**: camelCase + 下划线前缀，如 `_health`, `_isGamePaused`
- **方法名**: PascalCase，如 `StartGame()`, `UpdateHealth()`
- **常量**: UPPER_SNAKE_CASE，如 `MAX_HEALTH`, `DEFAULT_SPEED`
- **枚举**: PascalCase，如 `ActorType`, `ObjectState`
- **接口名**: 以I开头，如 `IDamageable`, `IInteractable`
- **文件名**: 与类名一致，如 `PlayerController.cs`
- **命名空间**: PascalCase，项目层级结构，如 `GameProject.Core.Manager`

### 注释规范

#### 注释原则
- **简洁优先**: 避免过度注释，专注于关键信息
- **单行注释**: 使用 `//` 进行简短说明
- **多行注释**: 使用 XML文档注释 `/// <summary>` 进行详细描述
- **简单summary注释**: 对于只有一行内容的`/// <summary>`注释，改为使用单行`//`注释

#### 必须注释的内容
1. **公共类**：说明职责和使用约束
2. **复杂方法**：包含业务逻辑或特殊要求的方法
3. **配置约束**：参数限制、文件路径要求等
4. **状态机枚举**：说明状态含义和转换条件

#### 可省略注释的内容
1. **简单方法**：如 `GetPlayer()`, `SetHealth(int value)`
2. **属性访问器**：如 `public int Health { get; set; }`
3. **工具方法**：如 `IsNull()`, `ToString()`

### MonoBehaviour开发规范

#### 基本原则
- 每个MonoBehaviour只负责一个明确的功能
- 使用 `[SerializeField]` 而不是 `public` 暴露字段
- **只有明确需要在Inspector中配置的字段才使用 `[SerializeField]`**
- 不应自动为所有私有字段生成 `[SerializeField]` 特性

#### Inspector优化
- 使用 `[Header]`, `[Tooltip]` 等特性改善Inspector体验
- 使用 `[Range]` 属性限制数值范围
- 合理分组相关字段，提高可读性

#### 生命周期规范
- 重写 `Awake()`, `Start()`, `Update()` 时考虑调用基类方法
- 缓存Transform等组件引用提升性能
- 使用事件系统进行组件间通信，避免直接引用

### 组件架构设计

#### 设计原则
- **优先使用组合而非继承**
- **每个组件职责单一**，便于测试和复用
- **避免在Update中频繁查找组件**
- **UI系统遵循MVC模式分离关注点**
- **使用接口驱动设计**，提高代码解耦性

### 性能优化要求

#### 运行时优化
- **缓存GetComponent结果**，避免重复查找
- **使用Object Pooling**管理频繁创建销毁的对象
- **避免在Update中进行字符串操作**
- **使用协程处理延时操作**，避免阻塞主线程

#### 渲染优化
- **合理使用LOD系统**减少远距离渲染开销
- **优化光照**：合理使用光照贴图和动态光照
- **纹理优化**：根据使用场景选择合适的纹理格式和大小

#### 资源管理优化
- **资源加载**：根据需要实现分块加载和异步加载
- **内存管理**：及时释放不使用的资源
- **预加载策略**：合理预加载关键资源

### 日志规范
- **只使用错误日志**：仅在发生错误、异常或关键问题时使用 `Debug.LogError()` 或 `Debug.LogException()`
- **禁用普通日志**：不使用 `Debug.Log()` 或 `Debug.LogWarning()` 进行常规信息输出
- **避免生成基础日志**：简单操作（如初始化成功、清理完成等）不需要生成日志代码
- **性能考虑**：避免在生产环境中产生不必要的日志开销

### 平台特定规范

#### 桌面端开发标准
**本项目专为桌面端（PC）平台开发，无需考虑移动端兼容性**

- **输入处理**: 只使用键盘和鼠标输入，无需考虑触屏操作
- **分辨率**: 支持常见桌面分辨率，UI适配1920x1080基准
- **性能**: 可以使用更高质量的渲染设置和特效
- **存储**: 可以使用本地文件系统进行数据存储

#### 配置表规范
- **命名规范**: 表名和字段名使用PascalCase，如`Item`
- **简洁原则**: 名称尽可能简短，但避免使用简写
- **查询方式**: 使用`ConfigManager`和`ConfigReader`查询位于`Assets\Resources\Configs\`的配置表
- **数据类型**: 支持基本数据类型和枚举的自动解析

## 项目技术栈

### 核心系统架构

#### 资源管理
- **ResourceManager**: 基于Unity Resources系统的轻量级资源管理工具
- **功能**: 资源加载、缓存和自动回收
- **详细文档**: [ResourceFramework_AIGuide.md](mdc:AIGuide/ResourceFramework_AIGuide.md)

#### 对象池管理
- **ObjectPoolManager & ObjectPool**: 对象池管理系统
- **功能**: 多类型对象复用、状态管理和超时清理
- **详细文档**: 参考 `PoolFramework_TechnicalDocument.md`

#### 配置系统
- **ConfigManager & ConfigReader**: 基于CSV的配置管理系统
- **功能**: 多种数据类型解析和类型安全查询
- **详细文档**: [ConfigFramework_AIGuide.md](mdc:AIGuide/ConfigFramework_AIGuide.md)

#### 事件系统
- **EventManager**: 统一事件架构
- **功能**: 系统间通信和事件生命周期管理
- **详细文档**: [EventFramework_AIGuide.md](mdc:AIGuide/EventFramework_AIGuide.md)

### 开发规范引用

#### 核心开发规范
- **Model类开发**: 参考 [Model类开发规范.md](mdc:RuleDocument/Model类开发规范.md)
- **View类开发**: 参考 [View开发规范.md](mdc:RuleDocument/View开发规范.md)
- **通用编码规范**: 参考 [通用编码规范.md](mdc:RuleDocument/通用编码规范.md)

## 协作与文档标准

### 技术文档生成规范

#### 生成触发条件
- **当用户提问"生成某某的技术文档"时，必须严格基于本规则文件中已有的规则和规范**
- **技术文档必须基于项目现有的管理器体系**，优先使用现有Manager接口
- **所有生成的技术文档都必须可以直接应用到项目中**

#### 内容一致性要求
- 技术文档内容必须遵循项目的架构设计、代码风格、命名约定等所有既定规范
- 文档中的代码示例必须符合Unity特定规范和性能优化要求
- 保持与项目整体技术栈和开发模式的一致性
- **生成技术文档时要求精简，只实现核心模块，避免过度设计和复杂架构，专注于用户需求的核心功能**

#### 文档结构要求
- **简介**: 用一句话简单介绍系统功能
- **详细接口**: 列出所有对外接口和方法
- **最佳实践**: 提供关键使用场景的代码示例
- **注意事项**: 关键的使用要点（可选）
- **其他需要补充的关键点**: 补充信息（可选）

#### 组件使用标注
- **设计文档中必须明确标注哪些脚本需要挂载到GameObject上使用**
- **区分MonoBehaviour组件和纯数据类/工具类的使用方式**
- 提供清晰的集成和使用指导说明
- 说明各组件的依赖关系和初始化顺序

### 文档存放规范

#### 文件夹详细规范
- **TechnicalGuide文件夹**：存放用于指导AI实现的技术文档
  - 用途：为AI提供具体的实现指导和技术规范
  - 内容：详细的系统设计、实现要求、代码规范等
  - 目标：确保AI按照统一标准生成代码和文档
- **AIGuide文件夹**：存放AI指导文档和功能文档
  - 用途：保存AI指导文档和根据TechnicalGuide指导生成的技术文档
  - 内容：完整的系统文档、使用说明、API文档等
  - 目标：为开发者和AI提供可用的技术文档
- **RuleDocument文件夹**：存放开发规范文档
  - 用途：定义代码标准、开发规范和设计原则
  - 内容：编码规范、Model开发规范、View开发规范等
  - 目标：确保代码质量和开发一致性
- **ChatDocument文件夹**：存放对话记录和临时文档
  - 用途：保存开发过程中的重要对话记录
  - 内容：技术讨论、需求分析、问题解决方案等
  - 目标：保留开发决策过程和知识沉淀

#### 文档命名规范
- **TechnicalGuide格式**：`功能名称_TechnicalGuide.md`
- **AIGuide格式**：`功能名称_AIGuide.md`
- **使用PascalCase命名**：如 `UIManager_AIGuide.md`、`SaveSystem_TechnicalGuide.md`
- **包含版本信息**：在文档内容中标注创建日期和版本信息
- **文档结构标准化**：遵循统一的章节顺序和格式要求

## 验证要求
- **架构一致性**: 确保使用正确的基类和接口
- **设计模式**: 遵循项目现有的设计模式
- **管理器使用**: 正确使用项目指定的管理器
- **事件发布**: 必要时包含事件发布逻辑
- **规范符合**: 符合所有编码和命名规范

**核心理念**: 我们专注于Unity游戏开发的技术卓越，严格遵循项目标准，确保代码质量和架构一致性。


