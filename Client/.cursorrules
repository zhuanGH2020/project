# Unity 3D Game Development Cursor Rules
# 适用于Unity 2021.3.37f1，3D游戏开发，PC平台

## 代码风格和格式化

### 命名约定
- **类名**: PascalCase，描述性强，如 `PlayerController`, `PlantGrowthSystem`
- **方法名**: PascalCase，动词开头，如 `StartGame()`, `SpawnPlant()`
- **变量名**: camelCase，私有变量加下划线前缀，如 `health`, `_isGamePaused`
- **常量**: UPPER_SNAKE_CASE，如 `MAX_PLANT_COUNT`, `GAME_START_DELAY`
- **接口名**: 以I开头，PascalCase，如 `IDamageable`, `IInteractable`
- **枚举名**: PascalCase，如 `PlantType`, `GameState`

### 代码格式
- 大括号使用Allman风格（新行）
- 每行最大长度120字符
- 操作符前后加空格
- 逗号后加空格

### 注释规范
- 所有公共方法和类必须有XML文档注释（/// <summary>）
- 复杂逻辑必须有行内注释
- 提供使用示例注释
- 性能注意事项说明

## Unity特定规范

### MonoBehaviour规范
- 每个MonoBehaviour只负责一个明确的功能
- 使用 `[SerializeField]` 而不是 `public` 暴露字段
- 使用 `[Header]`, `[Tooltip]` 等特性改善Inspector体验
- 使用 `[Range]` 属性限制数值范围
- 重写 `Awake()`, `Start()`, `Update()` 时调用基类方法
- 缓存Transform等组件提升性能
- 使用UnityEvent进行事件系统

### 组件设计
- 优先使用组合而非继承
- 每个组件职责单一，便于测试和复用
- 使用事件系统进行组件间通信
- 避免在Update中频繁查找组件
- UI系统遵循MVC模式分离关注点
- 游戏系统使用Manager模式管理

### 性能优化
- 缓存GetComponent结果
- 使用Object Pooling管理频繁创建销毁的对象（僵尸、子弹、特效）
- 避免在Update中进行字符串操作
- 使用协程处理延时操作
- 合理使用LOD系统
- 僵尸潮优化：使用对象池和批量处理
- 光源系统优化：使用光照贴图和动态光照
- 地图分块加载：三大区域按需加载

## 项目架构

### 架构设计
- **UI系统**: 使用MVC模式，分离数据、视图和控制逻辑
- **游戏系统**: 使用Manager模式，每个系统由专门的Manager管理
- **Actor系统**: 统一管理所有角色（主角、怪物、伙伴、宠物、NPC）
- **Object系统**: 统一管理所有建造对象（物品、建筑、工具）

### 文件夹结构
```
Assets/
├── Script/          # 所有脚本
│   ├── Core/         # 核心系统
│   │   ├── Enums.cs  # 枚举定义
│   │   ├── Resource/ # 资源管理
│   │   │   └── ResourceManager.cs  # 资源加载管理
│   │   ├── Pool/     # 对象池系统
│   │   │   ├── ObjectPoolManager.cs  # 对象池管理器
│   │   │   └── ObjectPool.cs         # 对象池
│   │   └── Config/   # 配置系统
│   │       ├── ConfigDefinition.cs    # 配置定义
│   │       ├── ConfigManager.cs       # 配置管理器
│   │       ├── ConfigReader.cs        # 配置读取器
│   │       └── Example/              # 示例代码
│   │           └── ConfigExample.cs   # 使用示例
│   ├── Actor/        # 角色系统
│   ├── Objects/      # 建造对象系统
│   ├── UI/           # UI系统（MVC架构）
│   ├── Managers/     # 管理器
│   └── Utils/        # 工具类
├── Resources/        # 资源文件
│   ├── Scenes/       # 场景
│   ├── Prefabs/      # 预制体
│   ├── Materials/    # 材质
│   ├── Textures/     # 贴图
│   ├── Models/       # 模型
│   └── Audio/        # 音频
└── Plugins/          # 插件
```

### 核心系统设计

#### 资源管理系统
- **ResourceManager**: 资源加载管理
  - 资源加载：同步/异步加载
  - 引用计数：跟踪资源引用，自动卸载
  - 资源缓存：已加载资源的缓存管理

#### 对象池系统
- **ObjectPoolManager**: 对象池管理器
  - 分类管理：不同类型对象使用不同对象池
  - 统一接口：提供对象获取和回收的统一接口
  - 生命周期：管理各个对象池的生命周期

- **ObjectPool**: 对象池
  - 对象复用：减少实例化/销毁开销
  - 多预制体支持：一个池可以管理多种预制体
  - 对象状态管理：自动重置对象状态
  - 超时清理：自动清理长时间未使用的对象

#### 配置系统
- **ConfigManager**: 配置管理器
  - 配置加载：加载CSV配置文件
  - 配置缓存：缓存已加载的配置
  - 配置查询：提供统一的查询接口
  - 配置清理：支持清理单个或所有配置

- **ConfigReader**: 配置读取器
  - 数据解析：解析CSV数据
  - 类型转换：支持多种数据类型
  - 错误处理：提供友好的错误提示
  - 默认值：支持默认值返回

- **ConfigDefinition**: 配置定义
  - 表头解析：解析CSV表头信息
  - 类型验证：验证数据类型有效性
  - 列管理：管理列名和列类型

- **支持的数据类型**:
  - 基础类型：int, float, string, bool
  - 数组类型：int[], float[], string[]
  - 枚举类型：enum<Type>
  - Unity类型：Vector2, Vector3, Color

#### 游戏系统
- **GameManager**: 游戏状态管理（白天/夜晚切换，游戏模式切换）
- **ActorManager**: 角色系统管理（主角、怪物、伙伴、宠物、NPC）
- **ObjectManager**: 建造对象系统管理（物品、建筑、工具）
- **AudioManager**: 音频管理
- **UIManager**: 界面管理（血条、时间、小地图）
- **CraftingManager**: 制作系统管理
- **SurvivalManager**: 生存系统管理（饥饿、脑力、血量）
- **WeatherManager**: 天气系统管理（温度、光照、特殊天气）
- **SeasonManager**: 季节系统管理（春夏秋冬、季节事件）
- **BossManager**: Boss战系统管理

### UI系统MVC实现规范
- **UI模块化设计**:
  - 每个UI功能模块独立，有自己的Model/View/Controller
  - 模块间通过事件系统通信，避免直接依赖
  - 每个模块可以独立开发、测试和维护

- **UI Model层**:
  - 每个模块只有一个Model类
  - 纯数据类，存储UI状态和数据
  - 不包含MonoBehaviour
  - 通过事件通知UI View层更新
  - 与游戏Manager系统交互获取数据

- **UI View层**:
  - 可以有多个View组件
  - 负责UI界面显示和动画
  - 监听UI Model层事件进行更新
  - 不包含业务逻辑，只负责展示
  - 使用MonoBehaviour组件

- **UI Controller层**:
  - 每个模块只有一个Controller类
  - 处理UI用户输入和交互
  - 更新UI Model层数据
  - 协调UI Model和UI View之间的交互
  - 与游戏Manager系统通信

### 数据管理
- **CSV配置**：
  - 物品基础属性表
  - 怪物属性表
  - 技能效果表
  - 掉落表

- **存档数据**：
  - 使用JSON文件存储存档数据
  - 避免硬编码数值，使用配置文件

### 配置管理规范
- **CSV使用场景**：
  - 大量数据（如物品表、怪物表）
  - 需要外部工具编辑的数据
  - 需要批量导入导出的数据
  - 策划习惯使用Excel编辑的数据

- **配置加载策略**：
  - 游戏启动时预加载ScriptableObject
  - 按需加载CSV数据
  - 实现配置热更新机制
  - 支持配置数据的版本控制

## 游戏特定规范

### Actor系统
- **ActorManager**统一管理所有角色
- **角色分类**:
  - ActorMain (主角)：玩家角色及其相关组件
  - Monster (怪物)：僵尸、Boss等敌对单位
  - Partner (伙伴)：豌豆射手、冰射手等防御伙伴
  - Pet (宠物)：公鸡、母鸡等可驯养动物
  - NPC (非玩家角色)：中立生物和交互角色
- **角色组件化设计**:
  - 每个角色由多个组件组成
  - 组件可复用，便于组合不同角色
  - 使用接口定义通用行为
- **角色生命周期管理**:
  - 统一的对象池管理
  - 角色的创建、激活、休眠、销毁
  - 支持角色的状态保存和恢复
- **状态机和Buff系统**:
  - 支持状态机接口 `IActorStateMachine`
  - 支持Buff系统接口 `IBuffSystem`
  - 提供统一的扩展接口

### Object系统
- **ObjectManager**统一管理所有建造对象
- **对象分类**:
  - Items (物品)：火把、锅、武器、装备等可交互物品
  - Buildings (建筑)：墙体、围栏、科技台等建筑
  - Tools (工具)：斧子、凿子等工具
- **对象组件化设计**:
  - 每个对象由多个组件组成
  - 组件可复用，便于组合不同对象
  - 使用接口定义通用行为
- **对象生命周期管理**:
  - 统一的对象池管理
  - 对象的创建、激活、休眠、销毁
  - 支持对象的状态保存和恢复
- **状态机系统**:
  - 支持状态机接口 `IObjectStateMachine`
  - 提供统一的扩展接口

### 制作系统
- 实现物品分类：食物类、工具类、光源类、建筑类、衣物类、武器类、召唤类
- 制作配方使用ScriptableObject管理
- 距离检测：第一次制作需要靠近科技台
- 武器耐久系统：等于固定子弹数量
- 支持材料升级和宝石镶嵌
- 与物品系统交互：制作完成后创建物品对象
- 物品放置系统：制作后的物品可以放置到世界

### 宝石系统
- 红宝石：加攻击力，来自森林狼王
- 蓝宝石：加防御力，来自石场石头王
- 黄宝石：加能量值，来自草原鸡王
- 宝石可镶嵌到装备和武器上

### 天气系统
- **WeatherManager**负责管理所有天气相关逻辑
- 温度系统：影响玩家生存状态，需要相应装备
- 光照系统：影响视野和光源需求
- 特殊天气：暴雨、沙尘暴等影响游戏玩法
- 天气变化：平滑过渡，避免突兀变化
- 天气事件：与季节系统联动

### 昼夜系统
- **GameManager**负责管理昼夜切换和游戏模式
- **白天模式**:
  - 主要玩法：生存、收集、建造
  - 无僵尸威胁，安全收集资源
  - 玩家需要管理饥饿、脑力、血量
  - 可以进行制作、种植、养殖等活动
  - 光源需求较低，但仍有基础光照

- **夜晚模式**:
  - 主要玩法：防御、战斗
  - 僵尸潮来袭，攻击科技台
  - 玩家需要保护科技台和自身
  - 伙伴系统激活，进行防御战斗
  - 光源系统重要，玩家需要在光源附近

- **昼夜切换**:
  - 平滑的时间过渡效果
  - 游戏模式自动切换
  - 影响所有相关系统（敌人、伙伴、UI等）
  - 特殊事件：月圆之夜僵尸潮

### 季节系统
- **SeasonManager**负责管理季节变化和事件
- 四季循环：春夏秋冬，每个季节有独特效果
- 季节事件：月圆之夜、特殊Boss出现
- 季节影响：影响资源生成、敌人行为
- 季节过渡：平滑的季节变化效果
- 季节数据：使用ScriptableObject配置

### Partner系统（伙伴）
- 伙伴对象继承自基础对象类
- 每种伙伴类型使用单独的类（豌豆射手、冰射手、火射手、发光射手、怕黑射手）
- 实现统一的伙伴接口 `IPartner`
- 使用状态机管理伙伴行为（攻击、冷却、升级）
- 支持伙伴升级和进化
- 伙伴具有不同的攻击类型和特殊效果
- 发光射手提供光源，怕黑射手在黑暗中增强
- **昼夜行为差异**:
  - 白天：伙伴休眠，不主动攻击
  - 夜晚：伙伴激活，进行防御战斗
  - 发光射手：夜晚提供额外光源
  - 怕黑射手：夜晚攻击力增强
- **特殊要求**:
  - AI行为接口
  - 攻击范围和仇恨系统

### Monster系统（怪物）
- 怪物对象继承自基础对象类
- 使用行为树或状态机管理AI
- 实现寻路系统，僵尸会主动攻击科技台
- 支持不同类型的怪物行为：
  - 普通僵尸：啃咬攻击，近战
  - 僵尸王：气功炮攻击，近战+远程
  - 毒气僵尸：范围中毒效果，死后给普通僵尸加buff
  - 铁桶僵尸：高防御
- 使用对象池管理怪物实例
- 实现僵尸潮系统，月圆之夜特殊事件
- Boss系统：森林狼王、石场石头怪、草场鸡王
- **昼夜行为差异**:
  - 白天：僵尸休眠，不主动攻击
  - 夜晚：僵尸激活，主动攻击科技台
  - 月圆之夜：僵尸潮数量激增
- **特殊要求**:
  - AI行为接口
  - 掉落物品接口
  - 攻击范围和仇恨系统

### ActorMain系统（主角）
- 主角对象继承自基础对象类
- 分离输入处理和逻辑处理
- 实现生存系统（饥饿、脑力、血量）
- 支持装备和道具系统（头盔、护甲、武器）
- 实现存档和读档功能
- 与WeatherManager交互：获取温度信息，调整装备
- 与SeasonManager交互：获取季节信息，调整行为
- 与GameManager交互：获取昼夜状态，调整行为模式
- **昼夜行为差异**:
  - 白天：专注生存和收集，管理饥饿、脑力
  - 夜晚：专注防御和战斗，保护科技台
- 光源系统：玩家需要在光源附近，否则扣血
- 制作系统：靠近科技台制作物品
- 背包系统：管理收集的物品和材料
- 宠物系统：战斗公鸡、母鸡养殖
- 陷阱系统：捕获母鸡等动物
- **特殊要求**:
  - 支持装备系统接口
  - 支持背包系统接口
  - 参考MovementController的移动实现

### Pet系统（宠物）
- 宠物对象继承自基础对象类
- 支持不同类型的宠物：
  - 公鸡：主动攻击玩家，战斗型
  - 母鸡：被动逃跑，可被捕获养殖
  - 其他可驯养动物：根据游戏需要扩展
- 宠物AI行为：
  - 公鸡：巡逻、发现玩家时攻击
  - 母鸡：觅食、发现玩家时逃跑
- 宠物养殖系统：
  - 母鸡可被捕获并养殖
  - 养殖的母鸡每天产蛋
  - 支持宠物繁殖和成长
- **特殊要求**:
  - 跟随主角逻辑
  - 成长系统
  - 特殊技能

### NPC系统（非玩家角色）
- NPC对象继承自基础对象类
- 支持不同类型的NPC：
  - 商人：交易物品
  - 任务NPC：提供任务
  - 中立生物：环境装饰
- NPC交互系统：
  - 对话系统
  - 交易系统
  - 任务系统
- **特殊要求**:
  - 简化AI行为
  - 交互接口
  - 对话系统

### Item系统（物品）
- 物品对象继承自基础Object类
- 支持不同类型的物品：
  - 光源类：火把、火堆、油灯等
  - 工具类：斧子、凿子、武器等
  - 建筑类：墙体、围栏、科技台等
  - 容器类：锅、冰箱、背包等
  - 装备类：头盔、护甲、衣物等
- 物品交互系统：
  - 可拾取物品：玩家可以收集
  - 可放置物品：玩家可以放置到世界
  - 可使用物品：玩家可以激活使用
  - 可制作物品：玩家可以制作
- 物品状态管理：
  - 耐久度系统：武器、工具有使用次数
  - 燃料系统：光源类物品需要燃料
  - 容量系统：容器类物品有存储容量
  - 装备效果：装备类物品提供属性加成

### UI系统MVC应用示例
- **血条UI模块**:
  - Model: HealthBarModel（血量数据、最大血量等）
  - Views: HealthBarView, HungerBarView, BrainBarView（多个血条显示）
  - Controller: HealthBarController（更新血量、处理血条交互等）

- **背包UI模块**:
  - Model: InventoryModel（物品列表、选中状态等）
  - Views: InventoryGridView, ItemDetailView, TooltipView（多个界面组件）
  - Controller: InventoryController（物品操作、与背包系统交互等）

- **制作UI模块**:
  - Model: CraftingModel（配方列表、材料状态等）
  - Views: CraftingMenuView, RecipeListView, ProgressBarView（多个界面组件）
  - Controller: CraftingController（制作逻辑、与制作系统交互等）

- **时间UI模块**:
  - Model: GameTimeModel（当前时间、季节、天气等）
  - Views: TimeDisplayView, SeasonIconView, WeatherIconView（多个显示组件）
  - Controller: GameTimeController（时间更新、季节变化等）

- **小地图UI模块**:
  - Model: MiniMapModel（地图数据、玩家位置等）
  - Views: MapView, PlayerMarkerView, LocationMarkerView（多个地图组件）
  - Controller: MiniMapController（地图更新、缩放控制等）

## 代码质量

### 错误处理
- 使用try-catch处理可能的异常
- 添加空值检查
- 使用Debug.Log进行调试，发布时移除
- 实现错误恢复机制

### 实现优先级和步骤

#### 第一阶段：核心框架
1. 实现Actor基类和Object基类
2. 实现基础的ActorData、ActorConfig和ObjectData、ObjectConfig
3. 创建状态机和Buff系统的接口定义
4. 实现ActorManager和ObjectManager单例

#### 第二阶段：具体角色和对象
1. 实现ActorMain类（主角）
2. 实现Monster类基础版本
3. 实现基础Item类
4. 测试基础功能

#### 第三阶段：扩展系统
1. 完整实现状态机系统
2. 完整实现Buff系统
3. 实现其余角色类型（Partner、Pet、NPC）
4. 实现其余对象类型（Buildings、Tools）

#### 第四阶段：集成和优化
1. 集成到现有的输入系统
2. 性能优化和内存管理
3. 添加调试和编辑器工具

### 测试
- 为核心系统编写单元测试
- 使用Unity Test Framework
- 测试边界条件和异常情况
- 保持测试代码的简洁性

### 版本控制
- 使用有意义的提交信息
- 每个提交只包含一个功能或修复
- 定期合并和同步代码
- 使用分支进行功能开发

## 性能监控

### 关键指标
- 帧率保持在60FPS以上
- 内存使用量控制在合理范围
- 减少GC压力
- 优化渲染性能

### 调试工具
- 使用Unity Profiler分析性能
- 使用Frame Debugger分析渲染
- 实现自定义性能监控
- 记录关键性能数据

## 协作规范

### 代码审查
- 所有代码必须经过同伴审查
- 关注代码可读性和维护性
- 确保遵循项目规范
- 及时反馈和改进

### 文档维护
- 维护API文档
- 记录重要的设计决策
- 更新README文件
- 记录已知问题和解决方案

## 安全考虑

### 数据安全
- 验证用户输入
- 保护敏感数据
- 实现反作弊机制
- 安全处理网络通信

### 代码安全
- 避免使用不安全的代码
- 验证第三方插件
- 定期更新依赖
- 遵循安全最佳实践

## 发布准备

### 优化
- 移除调试代码
- 优化资源大小
- 压缩纹理和音频
- 测试所有功能

### 打包
- 使用适当的构建设置
- 测试不同配置
- 准备发布说明
- 备份项目文件

---

# 使用说明
1. 将此文件放在项目根目录
2. Cursor会自动应用这些规则
3. 定期更新规则以适应项目发展
4. 团队成员都要遵循这些规范 