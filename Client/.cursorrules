# Unity 3D Game Development Cursor Rules
# 适用于Unity 2021.3.37f1，3D游戏开发，PC平台

## 代码风格和格式化

### 命名约定
- **类名**: PascalCase，描述性强，如 `PlayerController`, `PlantGrowthSystem`
- **方法名**: PascalCase，动词开头，如 `StartGame()`, `SpawnPlant()`
- **变量名**: camelCase，私有变量加下划线前缀，如 `health`, `_isGamePaused`
- **常量**: UPPER_SNAKE_CASE，如 `MAX_PLANT_COUNT`, `GAME_START_DELAY`
- **接口名**: 以I开头，PascalCase，如 `IDamageable`, `IInteractable`
- **枚举名**: PascalCase，如 `PlantType`, `GameState`

### 代码格式
- 使用4个空格缩进，不使用Tab
- 大括号使用Allman风格（新行）
- 每行最大长度120字符
- 操作符前后加空格
- 逗号后加空格

### 注释规范
- 所有公共方法和类必须有XML文档注释
- 复杂逻辑必须有行内注释
- 使用英文注释，清晰描述功能

## Unity特定规范

### MonoBehaviour规范
- 每个MonoBehaviour只负责一个明确的功能
- 使用 `[SerializeField]` 而不是 `public` 暴露字段
- 使用 `[Header]`, `[Tooltip]` 等特性改善Inspector体验
- 重写 `Awake()`, `Start()`, `Update()` 时调用基类方法

### 组件设计
- 优先使用组合而非继承
- 每个组件职责单一，便于测试和复用
- 使用事件系统进行组件间通信
- 避免在Update中频繁查找组件

### 性能优化
- 缓存GetComponent结果
- 使用Object Pooling管理频繁创建销毁的对象
- 避免在Update中进行字符串操作
- 使用协程处理延时操作
- 合理使用LOD系统

## 项目架构

### 文件夹结构
```
Assets/
├── Scripts/
│   ├── Core/           # 核心系统
│   ├── Player/         # 玩家相关
│   ├── Partners/       # 伙伴系统
│   ├── Enemies/        # 敌人系统
│   ├── UI/             # 用户界面
│   ├── Managers/       # 管理器
│   ├── Utils/          # 工具类
│   └── Events/         # 事件系统
├── Prefabs/
├── Scenes/
├── Materials/
├── Textures/
├── Models/
└── Audio/
```

### 核心系统设计
- **GameManager**: 游戏状态管理
- **PlantManager**: 植物系统管理
- **EnemyManager**: 敌人系统管理
- **ResourceManager**: 资源管理
- **AudioManager**: 音频管理
- **UIManager**: 界面管理

### 数据管理
- 使用ScriptableObjects存储配置数据
- 使用JSON或二进制文件存储存档数据
- 避免硬编码数值，使用配置文件

## 游戏特定规范

### 伙伴系统
- 每种伙伴类型使用单独的类
- 实现统一的伙伴接口
- 使用状态机管理伙伴生长周期
- 支持植物升级和进化

### 敌人系统
- 使用行为树或状态机管理AI
- 实现寻路系统
- 支持不同类型的敌人行为
- 使用对象池管理敌人实例

### 玩家系统
- 分离输入处理和逻辑处理
- 实现技能系统
- 支持装备和道具系统
- 实现存档和读档功能

## 代码质量

### 错误处理
- 使用try-catch处理可能的异常
- 添加空值检查
- 使用Debug.Log进行调试，发布时移除
- 实现错误恢复机制

### 测试
- 为核心系统编写单元测试
- 使用Unity Test Framework
- 测试边界条件和异常情况
- 保持测试代码的简洁性

### 版本控制
- 使用有意义的提交信息
- 每个提交只包含一个功能或修复
- 定期合并和同步代码
- 使用分支进行功能开发

## 性能监控

### 关键指标
- 帧率保持在60FPS以上
- 内存使用量控制在合理范围
- 减少GC压力
- 优化渲染性能

### 调试工具
- 使用Unity Profiler分析性能
- 使用Frame Debugger分析渲染
- 实现自定义性能监控
- 记录关键性能数据

## 协作规范

### 代码审查
- 所有代码必须经过同伴审查
- 关注代码可读性和维护性
- 确保遵循项目规范
- 及时反馈和改进

### 文档维护
- 维护API文档
- 记录重要的设计决策
- 更新README文件
- 记录已知问题和解决方案

## 安全考虑

### 数据安全
- 验证用户输入
- 保护敏感数据
- 实现反作弊机制
- 安全处理网络通信

### 代码安全
- 避免使用不安全的代码
- 验证第三方插件
- 定期更新依赖
- 遵循安全最佳实践

## 发布准备

### 优化
- 移除调试代码
- 优化资源大小
- 压缩纹理和音频
- 测试所有功能

### 打包
- 使用适当的构建设置
- 测试不同配置
- 准备发布说明
- 备份项目文件

---

# 使用说明
1. 将此文件放在项目根目录
2. Cursor会自动应用这些规则
3. 定期更新规则以适应项目发展
4. 团队成员都要遵循这些规范 